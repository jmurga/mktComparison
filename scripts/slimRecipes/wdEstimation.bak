
initialize() {

	//DEFINE CONSTANT TO INITIALIZE GENOMIC ELEMENT AND MUTATIONS TYPE
	defineConstant('mu', $mutRate);
	defineConstant('lengthG1', $lengthG1);
	defineConstant('lengthG2', $lengthG2);
	defineConstant('bins', $bins);

	defineConstant('neutralFreq', $neutralFreq);
	defineConstant('beneficialFreq', $beneficialFreq);
	defineConstant('deleteriousFreq', $deleteriousFreq);
	defineConstant('deleteriousFitness', $deleteriousFitness);
	defineConstant('beneficialFitness', $beneficialFitness);
	defineConstant('gammaShape', $gammaShape);
	defineConstant('h', $h);

	//INITIALIZE ELEMENT AND MUTATIONS
	initializeMutationRate(mu);
	initializeMutationType('m1', $h, 'f', 0);// neutral
	initializeMutationType('m2', $h, 'g', deleteriousFitness, gammaShape);// deleterious
	initializeMutationType('m3', $h, 'f', beneficialFitness);// beneficial
	//initializeMutationType('m2', h, 'f', 0);// neutral


	initializeGenomicElementType('g1', c(m1), c(neutralFreq)); //mS
	//initializeGenomicElementType('g2', c(m2, m2, m3), c(neutralFreq,deleteriousFreq,beneficialFreq)); //mN
	initializeGenomicElementType('g2', c(m2, m3), c(deleteriousFreq,beneficialFreq)); //mN
	initializeGenomicElement(g1, 0, lengthG1);
	initializeGenomicElement(g2, lengthG1+1, (lengthG1+lengthG2+1));

	initializeRecombinationRate($recombRate);	

}

1 {

	sim.addSubpop('p1', 1000);

	sim.setValue('p0', rep(0, bins));
	sim.setValue('pi', rep(0, bins));
	sim.setValue('pwd', rep(0, bins));
	sim.setValue('pneu', rep(0, bins));
	

}

$burnin:$generations late()	// generations after burn-in
{
	if (sim.generation % 500 != 0)
	{
		return;
	}
	
	muts = sim.mutations;
	// Get m2 mutations
	gammaMuts = sim.mutationsOfType(m2);
	//Check weaklyDel through fitness coefficient in gamma distribution
	weaklyDeleterious = gammaMuts[gammaMuts.selectionCoeff < (-1/1000)];
	weaklyDeleterious = sim.mutationFrequencies(NULL, weaklyDeleterious);
	//Check effectively neutral mutations through fitness coefficient in gamma distribution
	effectivelyNeutral = gammaMuts[gammaMuts.selectionCoeff >= (-1/1000)];
	effectivelyNeutral = sim.mutationFrequencies(NULL, effectivelyNeutral);

	//Get all mutations frequencies
	freqs  = sim.mutationFrequencies(NULL);
	m1Freq = freqs[muts.mutationType == m1];
	m2Freq = freqs[muts.mutationType == m2];
	m3Freq = freqs[muts.mutationType == m3];


	// Calculate p0 from polymorphism in m1 mutations
	p0Count   = sapply(0:(bins-1), " sum((m1Freq >= applyValue / bins) & (m1Freq < (applyValue + 1) / bins)); ");
	
	// Calculate pi from polymorphism in m2+m3 mutations
	m23Freq   = c(m2Freq,m3Freq);
	piCount   = sapply(0:(bins-1), " sum((m23Freq >= applyValue / bins) & (m23Freq < (applyValue + 1) / bins)); ");
	pwdCount  = sapply(0:(bins-1), " sum((weaklyDeleterious >= applyValue / bins) & (weaklyDeleterious < (applyValue + 1) / bins)); ");
	pneuCount = sapply(0:(bins-1), " sum((effectivelyNeutral >= applyValue / bins) & (effectivelyNeutral < (applyValue + 1) / bins)); ");
	
	
	// Add this generation's values in to variables	
	sim.setValue("p0", sim.getValue("p0") + p0Count);
	sim.setValue("pi", sim.getValue("pi") + piCount);
	sim.setValue("pwd", sim.getValue("pwd") + pwdCount);
	sim.setValue("pneu", sim.getValue("pneu") + pneuCount);

}

$generations late()
{
	// Get substitution and mutation info
	subs = sim.substitutions;
	m1Subs = subs[subs.mutationType == m1];
	m2Subs = subs[subs.mutationType == m2];
	m3Subs = subs[subs.mutationType == m3];
	
	// Calculate d and di from substitutions of m1 and m2+m3
	d0 = m1Subs.size();
	di = m2Subs.size() + m3Subs.size();

	f = (0:(bins-1) + 0.5) / bins;
	
	// Emit p0, pi and pwd
	p0 = sim.getValue("p0");
	pi = sim.getValue("pi");
	pwd = sim.getValue("pwd");	
	pneu = sim.getValue("pneu");	

	// Calculate the true alpha: m3 / (m2+m3) substitutions
	trueAlpha = m3Subs.size() / (m3Subs.size() + m2Subs.size());
	// Calculate the non-asymptotic MK estimate
	alpha = 1 - (d0/di) * (sum(pi)/sum(p0));
	

	// Output data in the format expected by the MK web service
	cat("daf\tPi\tP0\tPneu\tPwd\n");
	for (i in 0:(bins-1)){
		catn(f[i] + "\t" + pi[i] + "\t" + p0[i] + "\t" + pneu[i] + "\t" + pwd[i]);
	}


	catn('D0\tDi\tm0\tmi\ttrueAlpha\tb');
	catn(d0 + '\t' + di + '\t' + lengthG1 + '\t' + lengthG2 + '\t' + trueAlpha + '\t' + (sum(pwd)/sum(p0)*(lengthG1/lengthG2)));

	//nSyn = (subs.position < length);
	//syn = (subs.position > length);
//
	//catn(size(subs) + " substitutions occurred.");
	//catn(mean(subs[syn].mutationType == m1)*100 + "% are neutral in S.");
	//catn(mean(subs[nSyn].mutationType == m2)*100 + "% are neutral in NS.");
	//catn(mean(subs[nSyn].mutationType == m2)*100 + "% are non-neutral in NS.");
	//catn(mean(subs[nSyn].mutationType == m3)*100 + "% are non-neutral in NS.");
	//catn();
	//catn();
//
	//catn('++++++++++++++++++');
	//catn(size(m1));
	//catn(size(m2));
	//catn(size(m3));
	//catn(size(m2));
	//catn();
	//catn();
	// Emit f


}
